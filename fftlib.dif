1c1,2
< C-- FFT81       F77TRNFM.FOR                        13/09/85    JWC
---
> C---- Vectorisation modifications by Ian J. Tickle following discussions
> C     with program author L. Ten Eyck (San Diego Supercomputer Center).
3,6d3
< C
< C**** FOLLOWING ARE ROUTINES USED BY TEN EYCK'S FFT PROGRAMS***
< C
< C
8c5
< C     ===============================
---
> C     ==============================
11,14c8,10
< C     Complex finite discrete fourier transform
< C     transforms one dimension of multi-dimensional data
< C     modified by L. F. TEN EYCK from a one-dimensional version written
< C     by G. T. SANDE, 1969.
---
> C---- Complex finite discrete Fourier Transform. Transforms one
> C     dimension of multi-dimensional data modified by L. F. Ten Eyck
> C     from a one-dimensional version written by G. T. Sande, 1969.
19c15
< C     INDEXING -- the arrangement of the multi-dimensional data is
---
> C     Indexing -- The arrangement of the multi-dimensional data is
21c17
< C     control parameters in do loops.  when it is desired to cover all
---
> C     control parameters in DO loops.  when it is desired to cover all
23c19
< C     the value I0, the following is used.
---
> C     the value i0, the following is used.
34c30
< C     of the data, including normal fortran complex numbers (d(5) = 2)
---
> C     of the data, including normal fortran complex numbers (D(5) = 2)
39c35,36
< C     program.
---
> C     program. TWOGRP is the largest power of two that is treated as a
> C     special case.
41,43d37
< C---- TWOGRP is the largest power of two that is treated as a special
< C     case.
< C
45c39
<       INTEGER           N
---
>       INTEGER N
48,49c42,43
<       REAL              X(*),Y(*)
<       INTEGER           D(5)
---
>       REAL X(*),Y(*)
>       INTEGER D(5)
52,53c46,47
<       INTEGER           PMAX,PSYM,TWOGRP
<       LOGICAL           ERROR
---
>       INTEGER PMAX,PSYM,TWOGRP
>       LOGICAL ERROR
56c50
<       INTEGER           FACTOR(15),SYM(15),UNSYM(15)
---
>       INTEGER FACTOR(15),SYM(15),UNSYM(15)
59c53
<       EXTERNAL          DIPRP,MDFTKD,SRFP
---
>       EXTERNAL DIPRP,MDFTKD,SRFP
62d55
<       TWOGRP = 8
63a57,66
> C
> C---- A length 8 transform is a borderline case.  It may or may not
> C     be quicker to factorise it as a 2 and a 4, depending on
> C     vectorisation characteristics of machine. IJT/LFTE
> C
> C      TWOGRP = 8
>       TWOGRP = 4
> C
> C---- IJT/LFTE
> C
65,66c68,69
<           CALL SRFP(N,PMAX,TWOGRP,FACTOR,SYM,PSYM,UNSYM,ERROR)
<           IF (ERROR) THEN
---
>         CALL SRFP(N,PMAX,TWOGRP,FACTOR,SYM,PSYM,UNSYM,ERROR)
>         IF (ERROR) THEN
68,70c71,73
<               WRITE (6,FMT=9000) N
<               call ccperr(1,' stop in fftlib.for 1000')
<           ELSE
---
>           WRITE (6,FMT=6000) N
>           CALL CCPERR (1, 'STOP')
>         ELSE
72,74c75,77
<               CALL MDFTKD(N,FACTOR,D,X,Y)
<               CALL DIPRP(N,SYM,PSYM,UNSYM,D,X,Y)
<           END IF
---
>           CALL MDFTKD(N,FACTOR,D,X,Y)
>           CALL DIPRP(N,SYM,PSYM,UNSYM,D,X,Y)
>         END IF
77d79
< C---- Format statements
79c81,82
<  9000 FORMAT ('0INVALID NUMBER OF POINTS FOR CMPL FT.  N =',I10,//)
---
> C
>  6000 FORMAT (' Invalid number of points for CMPLFT  N =',I10)
279c282
< C     ==============================================
---
> C     =============================================
280a284
> C---- Radix 2 Multi-Dimensional complex Fourier Transform kernel
282c286,287
< C---- Radix 2 multi-dimensional complex fourier transform kernel
---
> C     Vectorisation modifications by Ian J. Tickle following discussions
> C     with program author L. Ten Eyck (San Diego Supercomputer Center).
283a289
> C
285c291
<       INTEGER           M,N
---
>       INTEGER M,N
288,289c294,295
<       REAL              X0(10),X1(10),Y0(10),Y1(10)
<       INTEGER           DIM(5)
---
>       REAL X0(10),X1(10),Y0(10),Y1(10)
>       INTEGER DIM(5)
292,295c298,300
<       REAL              ANGLE,C,FJM1,FM2,IS,IU,RS,RU,S,TWOPI
<       INTEGER           J,K,K0,K1,K2,KK,L,L1,M2,MM2,MOVER2,NS,NT,SEP,
<      +                  SIZE
<       LOGICAL           FOLD,ZERO
---
>       REAL ANGLE,C,FJM1,FM2,IS,IU,RS,RU,S,TWOPI
>       INTEGER J,K,K0,K1,K2,KK,L,L1,M2,MM2,MOVER2,NS,NT,SEP,SIZE
>       LOGICAL FOLD,ZERO
298c303
<       INTRINSIC         COS,REAL,SIN
---
>       INTRINSIC COS,REAL,SIN
301c306
<       DATA              TWOPI/6.283185/
---
>       DATA TWOPI/6.283185/
316,326c321,331
<       DO 50 J = 1,MOVER2
<           FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
<           K0 = (J-1)*SEP + 1
<           FJM1 = FJM1 + 1.0
<           ANGLE = TWOPI*FJM1/FM2
<           ZERO = ANGLE .EQ. 0.0
<           IF (.NOT.ZERO) THEN
<               C = COS(ANGLE)
<               S = SIN(ANGLE)
<           END IF
<    10     CONTINUE
---
>       DO 80 J = 1,MOVER2
>         FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
>         K0 = (J-1)*SEP + 1
>         FJM1 = FJM1 + 1.0
>         ANGLE = TWOPI*FJM1/FM2
>         ZERO = ANGLE .EQ. 0.0
>         IF (.NOT.ZERO) THEN
>           C = COS(ANGLE)
>           S = SIN(ANGLE)
>         END IF
>    10   CONTINUE
327a333
>         IF (ZERO) THEN
329,354c335,372
<               DO 30 L = KK,NT,L1
<                   K1 = L + SIZE
<                   DO 20 K = L,K1,K2
<                       RS = X0(K) + X1(K)
<                       IS = Y0(K) + Y1(K)
<                       RU = X0(K) - X1(K)
<                       IU = Y0(K) - Y1(K)
<                       X0(K) = RS
<                       Y0(K) = IS
<                       IF (ZERO) THEN
<                           X1(K) = RU
<                           Y1(K) = IU
<                       ELSE
<                           X1(K) = RU*C + IU*S
<                           Y1(K) = IU*C - RU*S
<                       END IF
<    20                 CONTINUE
<    30             CONTINUE
<    40         CONTINUE
<           IF (FOLD) THEN
<               FOLD = .FALSE.
<               K0 = (M+1-J)*SEP + 1
<               C = -C
<               GO TO 10
<           END IF
<    50     CONTINUE
---
>             DO 30 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 20 K = L,K1,K2
>                 RS = X0(K) + X1(K)
>                 IS = Y0(K) + Y1(K)
>                 RU = X0(K) - X1(K)
>                 IU = Y0(K) - Y1(K)
>                 X0(K) = RS
>                 Y0(K) = IS
>                 X1(K) = RU
>                 Y1(K) = IU
>    20         CONTINUE
>    30       CONTINUE
>    40     CONTINUE
>         ELSE
>           DO 70 KK = K0,NS,MM2
>             DO 60 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 50 K = L,K1,K2
>                 RS = X0(K) + X1(K)
>                 IS = Y0(K) + Y1(K)
>                 RU = X0(K) - X1(K)
>                 IU = Y0(K) - Y1(K)
>                 X0(K) = RS
>                 Y0(K) = IS
>                 X1(K) = RU*C + IU*S
>                 Y1(K) = IU*C - RU*S
>    50         CONTINUE
>    60       CONTINUE
>    70     CONTINUE
>         END IF
>         IF (FOLD) THEN
>           FOLD = .FALSE.
>           K0 = (M+1-J)*SEP + 1
>           C = -C
>           GO TO 10
>         END IF
>    80 CONTINUE
360c378
< C     ======================================================
---
> C     =====================================================
361a380
> C---- RADIX 3 MULTI-DIMENSIONAL COMPLEX FOURIER TRANSFORM KERNEL
363c382,383
< C---- Radix 3 multi-dimensional complex fourier transform kernel
---
> C     Vectorisation modifications by Ian J. Tickle following discussions
> C     with program author L. Ten Eyck (San Diego Supercomputer Center).
364a385
> C
366c387
<       INTEGER           M,N
---
>       INTEGER M,N
369,370c390,391
<       REAL              X0(10),X1(10),X2(10),Y0(10),Y1(10),Y2(10)
<       INTEGER           DIM(5)
---
>       REAL X0(10),X1(10),X2(10),Y0(10),Y1(10),Y2(10)
>       INTEGER DIM(5)
373,377c394,397
<       REAL              A,ANGLE,B,C1,C2,FJM1,FM3,I0,I1,I2,IA,IB,IS,R0,
<      +                  R1,R2,RA,RB,RS,S1,S2,T,TWOPI
<       INTEGER           J,K,K0,K1,K2,KK,L,L1,M3,MM3,MOVER2,NS,NT,SEP,
<      +                  SIZE
<       LOGICAL           FOLD,ZERO
---
>       REAL A,ANGLE,B,C1,C2,FJM1,FM3,I0,I1,I2,IA,IB,IS,R0,R1,R2,RA,RB,RS,
>      +     S1,S2,T,TWOPI
>       INTEGER J,K,K0,K1,K2,KK,L,L1,M3,MM3,MOVER2,NS,NT,SEP,SIZE
>       LOGICAL FOLD,ZERO
380c400
<       INTRINSIC         COS,REAL,SIN
---
>       INTRINSIC COS,REAL,SIN
383c403
<       DATA              TWOPI/6.283185/,A/-0.5/,B/0.86602540/
---
>       DATA TWOPI/6.283185/,A/-0.5/,B/0.86602540/
398,410c418,430
<       DO 50 J = 1,MOVER2
<           FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
<           K0 = (J-1)*SEP + 1
<           FJM1 = FJM1 + 1.0
<           ANGLE = TWOPI*FJM1/FM3
<           ZERO = ANGLE .EQ. 0.0
<           IF (.NOT.ZERO) THEN
<               C1 = COS(ANGLE)
<               S1 = SIN(ANGLE)
<               C2 = C1*C1 - S1*S1
<               S2 = S1*C1 + C1*S1
<           END IF
<    10     CONTINUE
---
>       DO 80 J = 1,MOVER2
>         FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
>         K0 = (J-1)*SEP + 1
>         FJM1 = FJM1 + 1.0
>         ANGLE = TWOPI*FJM1/FM3
>         ZERO = ANGLE .EQ. 0.0
>         IF (.NOT.ZERO) THEN
>           C1 = COS(ANGLE)
>           S1 = SIN(ANGLE)
>           C2 = C1*C1 - S1*S1
>           S2 = S1*C1 + C1*S1
>         END IF
>    10   CONTINUE
411a432
>         IF (ZERO) THEN
413,455c434,492
<               DO 30 L = KK,NT,L1
<                   K1 = L + SIZE
<                   DO 20 K = L,K1,K2
<                       R0 = X0(K)
<                       I0 = Y0(K)
<                       RS = X1(K) + X2(K)
<                       IS = Y1(K) + Y2(K)
<                       X0(K) = R0 + RS
<                       Y0(K) = I0 + IS
<                       RA = RS*A + R0
<                       IA = IS*A + I0
<                       RB = (X1(K)-X2(K))*B
<                       IB = (Y1(K)-Y2(K))*B
<                       IF (ZERO) THEN
<                           X1(K) = RA + IB
<                           Y1(K) = IA - RB
<                           X2(K) = RA - IB
<                           Y2(K) = IA + RB
<                       ELSE
<                           R1 = RA + IB
<                           I1 = IA - RB
<                           R2 = RA - IB
<                           I2 = IA + RB
<                           X1(K) = R1*C1 + I1*S1
<                           Y1(K) = I1*C1 - R1*S1
<                           X2(K) = R2*C2 + I2*S2
<                           Y2(K) = I2*C2 - R2*S2
<                       END IF
<    20                 CONTINUE
<    30             CONTINUE
<    40         CONTINUE
<           IF (FOLD) THEN
<               FOLD = .FALSE.
<               K0 = (M+1-J)*SEP + 1
<               T = C1*A + S1*B
<               S1 = C1*B - S1*A
<               C1 = T
<               T = C2*A - S2*B
<               S2 = -C2*B - S2*A
<               C2 = T
<               GO TO 10
<           END IF
<    50     CONTINUE
---
>             DO 30 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 20 K = L,K1,K2
>                 R0 = X0(K)
>                 I0 = Y0(K)
>                 RS = X1(K) + X2(K)
>                 IS = Y1(K) + Y2(K)
>                 X0(K) = R0 + RS
>                 Y0(K) = I0 + IS
>                 RA = RS*A + R0
>                 IA = IS*A + I0
>                 RB = (X1(K)-X2(K))*B
>                 IB = (Y1(K)-Y2(K))*B
>                 X1(K) = RA + IB
>                 Y1(K) = IA - RB
>                 X2(K) = RA - IB
>                 Y2(K) = IA + RB
>    20         CONTINUE
>    30       CONTINUE
>    40     CONTINUE
>         ELSE
>           DO 70 KK = K0,NS,MM3
>             DO 60 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 50 K = L,K1,K2
>                 R0 = X0(K)
>                 I0 = Y0(K)
>                 RS = X1(K) + X2(K)
>                 IS = Y1(K) + Y2(K)
>                 X0(K) = R0 + RS
>                 Y0(K) = I0 + IS
>                 RA = RS*A + R0
>                 IA = IS*A + I0
>                 RB = (X1(K)-X2(K))*B
>                 IB = (Y1(K)-Y2(K))*B
>                 R1 = RA + IB
>                 I1 = IA - RB
>                 R2 = RA - IB
>                 I2 = IA + RB
>                 X1(K) = R1*C1 + I1*S1
>                 Y1(K) = I1*C1 - R1*S1
>                 X2(K) = R2*C2 + I2*S2
>                 Y2(K) = I2*C2 - R2*S2
>    50         CONTINUE
>    60       CONTINUE
>    70     CONTINUE
>         END IF
>         IF (FOLD) THEN
>           FOLD = .FALSE.
>           K0 = (M+1-J)*SEP + 1
>           T = C1*A + S1*B
>           S1 = C1*B - S1*A
>           C1 = T
>           T = C2*A - S2*B
>           S2 = -C2*B - S2*A
>           C2 = T
>           GO TO 10
>         END IF
>    80 CONTINUE
461c498
< C     ==============================================================
---
> C     =============================================================
462a500
> C---- Radix 4 multi-Dimensional complex Fourier Transform kernel
464c502,503
< C---- Radix 4 multi-dimensional complex fourier transform kernel
---
> C     Vectorisation modifications by Ian J. Tickle following discussions
> C     with program author L. Ten Eyck (San Diego Supercomputer Center).
465a505
> C
467c507
<       INTEGER           M,N
---
>       INTEGER M,N
470,472c510,511
<       REAL              X0(10),X1(10),X2(10),X3(10),Y0(10),Y1(10),
<      +                  Y2(10),Y3(10)
<       INTEGER           DIM(5)
---
>       REAL X0(10),X1(10),X2(10),X3(10),Y0(10),Y1(10),Y2(10),Y3(10)
>       INTEGER DIM(5)
475,479c514,517
<       REAL              ANGLE,C1,C2,C3,FJM1,FM4,I1,I2,I3,IS0,IS1,IU0,
<      +                  IU1,R1,R2,R3,RS0,RS1,RU0,RU1,S1,S2,S3,T,TWOPI
<       INTEGER           J,K,K0,K1,K2,KK,L,L1,M4,MM4,MOVER2,NS,NT,SEP,
<      +                  SIZE
<       LOGICAL           FOLD,ZERO
---
>       REAL ANGLE,C1,C2,C3,FJM1,FM4,I1,I2,I3,IS0,IS1,IU0,IU1,R1,R2,R3,
>      +     RS0,RS1,RU0,RU1,S1,S2,S3,T,TWOPI
>       INTEGER J,K,K0,K1,K2,KK,L,L1,M4,MM4,MOVER2,NS,NT,SEP,SIZE
>       LOGICAL FOLD,ZERO
482c520
<       INTRINSIC         COS,REAL,SIN
---
>       INTRINSIC COS,REAL,SIN
485c523
<       DATA              TWOPI/6.283185/
---
>       DATA TWOPI/6.283185/
500,514c538,552
<       DO 50 J = 1,MOVER2
<           FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
<           K0 = (J-1)*SEP + 1
<           FJM1 = FJM1 + 1.0
<           ANGLE = TWOPI*FJM1/FM4
<           ZERO = ANGLE .EQ. 0.0
<           IF (.NOT.ZERO) THEN
<               C1 = COS(ANGLE)
<               S1 = SIN(ANGLE)
<               C2 = C1*C1 - S1*S1
<               S2 = S1*C1 + C1*S1
<               C3 = C2*C1 - S2*S1
<               S3 = S2*C1 + C2*S1
<           END IF
<    10     CONTINUE
---
>       DO 80 J = 1,MOVER2
>         FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
>         K0 = (J-1)*SEP + 1
>         FJM1 = FJM1 + 1.0
>         ANGLE = TWOPI*FJM1/FM4
>         ZERO = ANGLE .EQ. 0.0
>         IF (.NOT.ZERO) THEN
>           C1 = COS(ANGLE)
>           S1 = SIN(ANGLE)
>           C2 = C1*C1 - S1*S1
>           S2 = S1*C1 + C1*S1
>           C3 = C2*C1 - S2*S1
>           S3 = S2*C1 + C2*S1
>         END IF
>    10   CONTINUE
515a554
>         IF (ZERO) THEN
517,566c556,621
<               DO 30 L = KK,NT,L1
<                   K1 = L + SIZE
<                   DO 20 K = L,K1,K2
<                       RS0 = X0(K) + X2(K)
<                       IS0 = Y0(K) + Y2(K)
<                       RU0 = X0(K) - X2(K)
<                       IU0 = Y0(K) - Y2(K)
<                       RS1 = X1(K) + X3(K)
<                       IS1 = Y1(K) + Y3(K)
<                       RU1 = X1(K) - X3(K)
<                       IU1 = Y1(K) - Y3(K)
<                       X0(K) = RS0 + RS1
<                       Y0(K) = IS0 + IS1
<                       IF (ZERO) THEN
<                           X2(K) = RU0 + IU1
<                           Y2(K) = IU0 - RU1
<                           X1(K) = RS0 - RS1
<                           Y1(K) = IS0 - IS1
<                           X3(K) = RU0 - IU1
<                           Y3(K) = IU0 + RU1
<                       ELSE
<                           R1 = RU0 + IU1
<                           I1 = IU0 - RU1
<                           R2 = RS0 - RS1
<                           I2 = IS0 - IS1
<                           R3 = RU0 - IU1
<                           I3 = IU0 + RU1
<                           X2(K) = R1*C1 + I1*S1
<                           Y2(K) = I1*C1 - R1*S1
<                           X1(K) = R2*C2 + I2*S2
<                           Y1(K) = I2*C2 - R2*S2
<                           X3(K) = R3*C3 + I3*S3
<                           Y3(K) = I3*C3 - R3*S3
<                       END IF
<    20                 CONTINUE
<    30             CONTINUE
<    40         CONTINUE
<           IF (FOLD) THEN
<               FOLD = .FALSE.
<               K0 = (M+1-J)*SEP + 1
<               T = C1
<               C1 = S1
<               S1 = T
<               C2 = -C2
<               T = C3
<               C3 = -S3
<               S3 = -T
<               GO TO 10
<           END IF
<    50     CONTINUE
---
>             DO 30 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 20 K = L,K1,K2
>                 RS0 = X0(K) + X2(K)
>                 IS0 = Y0(K) + Y2(K)
>                 RU0 = X0(K) - X2(K)
>                 IU0 = Y0(K) - Y2(K)
>                 RS1 = X1(K) + X3(K)
>                 IS1 = Y1(K) + Y3(K)
>                 RU1 = X1(K) - X3(K)
>                 IU1 = Y1(K) - Y3(K)
>                 X0(K) = RS0 + RS1
>                 Y0(K) = IS0 + IS1
>                 X2(K) = RU0 + IU1
>                 Y2(K) = IU0 - RU1
>                 X1(K) = RS0 - RS1
>                 Y1(K) = IS0 - IS1
>                 X3(K) = RU0 - IU1
>                 Y3(K) = IU0 + RU1
>    20         CONTINUE
>    30       CONTINUE
>    40     CONTINUE
>         ELSE
>           DO 70 KK = K0,NS,MM4
>             DO 60 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 50 K = L,K1,K2
>                 RS0 = X0(K) + X2(K)
>                 IS0 = Y0(K) + Y2(K)
>                 RU0 = X0(K) - X2(K)
>                 IU0 = Y0(K) - Y2(K)
>                 RS1 = X1(K) + X3(K)
>                 IS1 = Y1(K) + Y3(K)
>                 RU1 = X1(K) - X3(K)
>                 IU1 = Y1(K) - Y3(K)
>                 X0(K) = RS0 + RS1
>                 Y0(K) = IS0 + IS1
>                 R1 = RU0 + IU1
>                 I1 = IU0 - RU1
>                 R2 = RS0 - RS1
>                 I2 = IS0 - IS1
>                 R3 = RU0 - IU1
>                 I3 = IU0 + RU1
>                 X2(K) = R1*C1 + I1*S1
>                 Y2(K) = I1*C1 - R1*S1
>                 X1(K) = R2*C2 + I2*S2
>                 Y1(K) = I2*C2 - R2*S2
>                 X3(K) = R3*C3 + I3*S3
>                 Y3(K) = I3*C3 - R3*S3
>    50         CONTINUE
>    60       CONTINUE
>    70     CONTINUE
>         END IF
>         IF (FOLD) THEN
>           FOLD = .FALSE.
>           K0 = (M+1-J)*SEP + 1
>           T = C1
>           C1 = S1
>           S1 = T
>           C2 = -C2
>           T = C3
>           C3 = -S3
>           S3 = -T
>           GO TO 10
>         END IF
>    80 CONTINUE
572c627
< C     =================================================================
---
> C     ================================================================
573a629
> C---- Radix 5 Multi-Dimensional complex Fourier Transform kernel
575c631,632
< C---- Radix 5 multi-dimensional complex fourier transform kernel
---
> C     Vectorisation modifications by Ian J. Tickle following discussions
> C     with program author L. Ten Eyck (San Diego Supercomputer Center).
576a634
> C
578c636
<       INTEGER           M,N
---
>       INTEGER M,N
581,583c639,641
<       REAL              X0(10),X1(10),X2(10),X3(10),X4(10),Y0(10),
<      +                  Y1(10),Y2(10),Y3(10),Y4(10)
<       INTEGER           DIM(5)
---
>       REAL X0(10),X1(10),X2(10),X3(10),X4(10),Y0(10),Y1(10),Y2(10),
>      +     Y3(10),Y4(10)
>       INTEGER DIM(5)
586,592c644,648
<       REAL              A1,A2,ANGLE,B1,B2,C1,C2,C3,C4,FJM1,FM5,I0,I1,I2,
<      +                  I3,I4,IA1,IA2,IB1,IB2,IS1,IS2,IU1,IU2,R0,R1,R2,
<      +                  R3,R4,RA1,RA2,RB1,RB2,RS1,RS2,RU1,RU2,S1,S2,S3,
<      +                  S4,T,TWOPI
<       INTEGER           J,K,K0,K1,K2,KK,L,L1,M5,MM5,MOVER2,NS,NT,SEP,
<      +                  SIZE
<       LOGICAL           FOLD,ZERO
---
>       REAL A1,A2,ANGLE,B1,B2,C1,C2,C3,C4,FJM1,FM5,I0,I1,I2,I3,I4,IA1,
>      +     IA2,IB1,IB2,IS1,IS2,IU1,IU2,R0,R1,R2,R3,R4,RA1,RA2,RB1,RB2,
>      +     RS1,RS2,RU1,RU2,S1,S2,S3,S4,T,TWOPI
>       INTEGER J,K,K0,K1,K2,KK,L,L1,M5,MM5,MOVER2,NS,NT,SEP,SIZE
>       LOGICAL FOLD,ZERO
595c651
<       INTRINSIC         COS,REAL,SIN
---
>       INTRINSIC COS,REAL,SIN
598,599c654,655
<       DATA              TWOPI/6.283185/,A1/0.30901699/,B1/0.95105652/,
<      +                  A2/-0.80901699/,B2/0.58778525/
---
>       DATA TWOPI/6.283185/,A1/0.30901699/,B1/0.95105652/,
>      +     A2/-0.80901699/,B2/0.58778525/
614,630c670,686
<       DO 50 J = 1,MOVER2
<           FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
<           K0 = (J-1)*SEP + 1
<           FJM1 = FJM1 + 1.0
<           ANGLE = TWOPI*FJM1/FM5
<           ZERO = ANGLE .EQ. 0.0
<           IF (.NOT.ZERO) THEN
<               C1 = COS(ANGLE)
<               S1 = SIN(ANGLE)
<               C2 = C1*C1 - S1*S1
<               S2 = S1*C1 + C1*S1
<               C3 = C2*C1 - S2*S1
<               S3 = S2*C1 + C2*S1
<               C4 = C2*C2 - S2*S2
<               S4 = S2*C2 + C2*S2
<           END IF
<    10     CONTINUE
---
>       DO 80 J = 1,MOVER2
>         FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
>         K0 = (J-1)*SEP + 1
>         FJM1 = FJM1 + 1.0
>         ANGLE = TWOPI*FJM1/FM5
>         ZERO = ANGLE .EQ. 0.0
>         IF (.NOT.ZERO) THEN
>           C1 = COS(ANGLE)
>           S1 = SIN(ANGLE)
>           C2 = C1*C1 - S1*S1
>           S2 = S1*C1 + C1*S1
>           C3 = C2*C1 - S2*S1
>           S3 = S2*C1 + C2*S1
>           C4 = C2*C2 - S2*S2
>           S4 = S2*C2 + C2*S2
>         END IF
>    10   CONTINUE
631a688
>         IF (ZERO) THEN
633,703c690,786
<               DO 30 L = KK,NT,L1
<                   K1 = L + SIZE
<                   DO 20 K = L,K1,K2
<                       R0 = X0(K)
<                       I0 = Y0(K)
<                       RS1 = X1(K) + X4(K)
<                       IS1 = Y1(K) + Y4(K)
<                       RU1 = X1(K) - X4(K)
<                       IU1 = Y1(K) - Y4(K)
<                       RS2 = X2(K) + X3(K)
<                       IS2 = Y2(K) + Y3(K)
<                       RU2 = X2(K) - X3(K)
<                       IU2 = Y2(K) - Y3(K)
<                       X0(K) = R0 + RS1 + RS2
<                       Y0(K) = I0 + IS1 + IS2
<                       RA1 = RS1*A1 + R0 + RS2*A2
<                       IA1 = IS1*A1 + I0 + IS2*A2
<                       RA2 = RS1*A2 + R0 + RS2*A1
<                       IA2 = IS1*A2 + I0 + IS2*A1
<                       RB1 = RU1*B1 + RU2*B2
<                       IB1 = IU1*B1 + IU2*B2
<                       RB2 = RU1*B2 - RU2*B1
<                       IB2 = IU1*B2 - IU2*B1
<                       IF (ZERO) THEN
<                           X1(K) = RA1 + IB1
<                           Y1(K) = IA1 - RB1
<                           X2(K) = RA2 + IB2
<                           Y2(K) = IA2 - RB2
<                           X3(K) = RA2 - IB2
<                           Y3(K) = IA2 + RB2
<                           X4(K) = RA1 - IB1
<                           Y4(K) = IA1 + RB1
<                       ELSE
<                           R1 = RA1 + IB1
<                           I1 = IA1 - RB1
<                           R2 = RA2 + IB2
<                           I2 = IA2 - RB2
<                           R3 = RA2 - IB2
<                           I3 = IA2 + RB2
<                           R4 = RA1 - IB1
<                           I4 = IA1 + RB1
<                           X1(K) = R1*C1 + I1*S1
<                           Y1(K) = I1*C1 - R1*S1
<                           X2(K) = R2*C2 + I2*S2
<                           Y2(K) = I2*C2 - R2*S2
<                           X3(K) = R3*C3 + I3*S3
<                           Y3(K) = I3*C3 - R3*S3
<                           X4(K) = R4*C4 + I4*S4
<                           Y4(K) = I4*C4 - R4*S4
<                       END IF
<    20                 CONTINUE
<    30             CONTINUE
<    40         CONTINUE
<           IF (FOLD) THEN
<               FOLD = .FALSE.
<               K0 = (M+1-J)*SEP + 1
<               T = C1*A1 + S1*B1
<               S1 = C1*B1 - S1*A1
<               C1 = T
<               T = C2*A2 + S2*B2
<               S2 = C2*B2 - S2*A2
<               C2 = T
<               T = C3*A2 - S3*B2
<               S3 = -C3*B2 - S3*A2
<               C3 = T
<               T = C4*A1 - S4*B1
<               S4 = -C4*B1 - S4*A1
<               C4 = T
<               GO TO 10
<           END IF
<    50     CONTINUE
---
>             DO 30 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 20 K = L,K1,K2
>                 R0 = X0(K)
>                 I0 = Y0(K)
>                 RS1 = X1(K) + X4(K)
>                 IS1 = Y1(K) + Y4(K)
>                 RU1 = X1(K) - X4(K)
>                 IU1 = Y1(K) - Y4(K)
>                 RS2 = X2(K) + X3(K)
>                 IS2 = Y2(K) + Y3(K)
>                 RU2 = X2(K) - X3(K)
>                 IU2 = Y2(K) - Y3(K)
>                 X0(K) = R0 + RS1 + RS2
>                 Y0(K) = I0 + IS1 + IS2
>                 RA1 = RS1*A1 + R0 + RS2*A2
>                 IA1 = IS1*A1 + I0 + IS2*A2
>                 RA2 = RS1*A2 + R0 + RS2*A1
>                 IA2 = IS1*A2 + I0 + IS2*A1
>                 RB1 = RU1*B1 + RU2*B2
>                 IB1 = IU1*B1 + IU2*B2
>                 RB2 = RU1*B2 - RU2*B1
>                 IB2 = IU1*B2 - IU2*B1
>                 X1(K) = RA1 + IB1
>                 Y1(K) = IA1 - RB1
>                 X2(K) = RA2 + IB2
>                 Y2(K) = IA2 - RB2
>                 X3(K) = RA2 - IB2
>                 Y3(K) = IA2 + RB2
>                 X4(K) = RA1 - IB1
>                 Y4(K) = IA1 + RB1
>    20         CONTINUE
>    30       CONTINUE
>    40     CONTINUE
>         ELSE
>           DO 70 KK = K0,NS,MM5
>             DO 60 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 50 K = L,K1,K2
>                 R0 = X0(K)
>                 I0 = Y0(K)
>                 RS1 = X1(K) + X4(K)
>                 IS1 = Y1(K) + Y4(K)
>                 RU1 = X1(K) - X4(K)
>                 IU1 = Y1(K) - Y4(K)
>                 RS2 = X2(K) + X3(K)
>                 IS2 = Y2(K) + Y3(K)
>                 RU2 = X2(K) - X3(K)
>                 IU2 = Y2(K) - Y3(K)
>                 X0(K) = R0 + RS1 + RS2
>                 Y0(K) = I0 + IS1 + IS2
>                 RA1 = RS1*A1 + R0 + RS2*A2
>                 IA1 = IS1*A1 + I0 + IS2*A2
>                 RA2 = RS1*A2 + R0 + RS2*A1
>                 IA2 = IS1*A2 + I0 + IS2*A1
>                 RB1 = RU1*B1 + RU2*B2
>                 IB1 = IU1*B1 + IU2*B2
>                 RB2 = RU1*B2 - RU2*B1
>                 IB2 = IU1*B2 - IU2*B1
>                 R1 = RA1 + IB1
>                 I1 = IA1 - RB1
>                 R2 = RA2 + IB2
>                 I2 = IA2 - RB2
>                 R3 = RA2 - IB2
>                 I3 = IA2 + RB2
>                 R4 = RA1 - IB1
>                 I4 = IA1 + RB1
>                 X1(K) = R1*C1 + I1*S1
>                 Y1(K) = I1*C1 - R1*S1
>                 X2(K) = R2*C2 + I2*S2
>                 Y2(K) = I2*C2 - R2*S2
>                 X3(K) = R3*C3 + I3*S3
>                 Y3(K) = I3*C3 - R3*S3
>                 X4(K) = R4*C4 + I4*S4
>                 Y4(K) = I4*C4 - R4*S4
>    50         CONTINUE
>    60       CONTINUE
>    70     CONTINUE
>         END IF
>         IF (FOLD) THEN
>           FOLD = .FALSE.
>           K0 = (M+1-J)*SEP + 1
>           T = C1*A1 + S1*B1
>           S1 = C1*B1 - S1*A1
>           C1 = T
>           T = C2*A2 + S2*B2
>           S2 = C2*B2 - S2*A2
>           C2 = T
>           T = C3*A2 - S3*B2
>           S3 = -C3*B2 - S3*A2
>           C3 = T
>           T = C4*A1 - S4*B1
>           S4 = -C4*B1 - S4*A1
>           C4 = T
>           GO TO 10
>         END IF
>    80 CONTINUE
710c793
< C      ===============================================================
---
> C     ================================================================
711a795
> C---- Radix 8 Multi-Dimensional complex Fourier Transform kernel
713c797,798
< C---- Radix 8 multi-dimensional complex fourier transform kernel
---
> C     Vectorisation modifications by Ian J. Tickle following discussions
> C     with program author L. Ten Eyck (San Diego Supercomputer Center).
714a800
> C
716c802
<       INTEGER           M,N
---
>       INTEGER M,N
719,722c805,807
<       REAL              X0(10),X1(10),X2(10),X3(10),X4(10),X5(10),
<      +                  X6(10),X7(10),Y0(10),Y1(10),Y2(10),Y3(10),
<      +                  Y4(10),Y5(10),Y6(10),Y7(10)
<       INTEGER           DIM(5)
---
>       REAL X0(10),X1(10),X2(10),X3(10),X4(10),X5(10),X6(10),X7(10),
>      +     Y0(10),Y1(10),Y2(10),Y3(10),Y4(10),Y5(10),Y6(10),Y7(10)
>       INTEGER DIM(5)
725,733c810,816
<       REAL              ANGLE,C1,C2,C3,C4,C5,C6,C7,E,FJM1,FM8,I1,I2,I3,
<      +                  I4,I5,I6,I7,IS0,IS1,IS2,IS3,ISS0,ISS1,ISU0,ISU1,
<      +                  IU0,IU1,IU2,IU3,IUS0,IUS1,IUU0,IUU1,R1,R2,R3,R4,
<      +                  R5,R6,R7,RS0,RS1,RS2,RS3,RSS0,RSS1,RSU0,RSU1,
<      +                  RU0,RU1,RU2,RU3,RUS0,RUS1,RUU0,RUU1,S1,S2,S3,S4,
<      +                  S5,S6,S7,T,TWOPI
<       INTEGER           J,K,K0,K1,K2,KK,L,L1,M8,MM8,MOVER2,NS,NT,SEP,
<      +                  SIZE
<       LOGICAL           FOLD,ZERO
---
>       REAL ANGLE,C1,C2,C3,C4,C5,C6,C7,E,FJM1,FM8,I1,I2,I3,I4,I5,I6,I7,
>      +     IS0,IS1,IS2,IS3,ISS0,ISS1,ISU0,ISU1,IU0,IU1,IU2,IU3,IUS0,
>      +     IUS1,IUU0,IUU1,R1,R2,R3,R4,R5,R6,R7,RS0,RS1,RS2,RS3,RSS0,
>      +     RSS1,RSU0,RSU1,RU0,RU1,RU2,RU3,RUS0,RUS1,RUU0,RUU1,S1,S2,S3,
>      +     S4,S5,S6,S7,T,TWOPI
>       INTEGER J,K,K0,K1,K2,KK,L,L1,M8,MM8,MOVER2,NS,NT,SEP,SIZE
>       LOGICAL FOLD,ZERO
736c819
<       INTRINSIC         COS,REAL,SIN
---
>       INTRINSIC COS,REAL,SIN
739c822
<       DATA              TWOPI/6.283185/,E/0.70710678/
---
>       DATA TWOPI/6.283185/,E/0.70710678/
754,776c837,859
<       DO 50 J = 1,MOVER2
<           FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
<           K0 = (J-1)*SEP + 1
<           FJM1 = FJM1 + 1.0
<           ANGLE = TWOPI*FJM1/FM8
<           ZERO = ANGLE .EQ. 0.0
<           IF (.NOT.ZERO) THEN
<               C1 = COS(ANGLE)
<               S1 = SIN(ANGLE)
<               C2 = C1*C1 - S1*S1
<               S2 = S1*C1 + C1*S1
<               C3 = C2*C1 - S2*S1
<               S3 = S2*C1 + C2*S1
<               C4 = C2*C2 - S2*S2
<               S4 = S2*C2 + C2*S2
<               C5 = C4*C1 - S4*S1
<               S5 = S4*C1 + C4*S1
<               C6 = C4*C2 - S4*S2
<               S6 = S4*C2 + C4*S2
<               C7 = C4*C3 - S4*S3
<               S7 = S4*C3 + C4*S3
<           END IF
<    10     CONTINUE
---
>       DO 80 J = 1,MOVER2
>         FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
>         K0 = (J-1)*SEP + 1
>         FJM1 = FJM1 + 1.0
>         ANGLE = TWOPI*FJM1/FM8
>         ZERO = ANGLE .EQ. 0.0
>         IF (.NOT.ZERO) THEN
>           C1 = COS(ANGLE)
>           S1 = SIN(ANGLE)
>           C2 = C1*C1 - S1*S1
>           S2 = S1*C1 + C1*S1
>           C3 = C2*C1 - S2*S1
>           S3 = S2*C1 + C2*S1
>           C4 = C2*C2 - S2*S2
>           S4 = S2*C2 + C2*S2
>           C5 = C4*C1 - S4*S1
>           S5 = S4*C1 + C4*S1
>           C6 = C4*C2 - S4*S2
>           S6 = S4*C2 + C4*S2
>           C7 = C4*C3 - S4*S3
>           S7 = S4*C3 + C4*S3
>         END IF
>    10   CONTINUE
777a861
>         IF (ZERO) THEN
779,894c863,1024
<               DO 30 L = KK,NT,L1
<                   K1 = L + SIZE
<                   DO 20 K = L,K1,K2
<                       RS0 = X0(K) + X4(K)
<                       IS0 = Y0(K) + Y4(K)
<                       RU0 = X0(K) - X4(K)
<                       IU0 = Y0(K) - Y4(K)
<                       RS1 = X1(K) + X5(K)
<                       IS1 = Y1(K) + Y5(K)
<                       RU1 = X1(K) - X5(K)
<                       IU1 = Y1(K) - Y5(K)
<                       RS2 = X2(K) + X6(K)
<                       IS2 = Y2(K) + Y6(K)
<                       RU2 = X2(K) - X6(K)
<                       IU2 = Y2(K) - Y6(K)
<                       RS3 = X3(K) + X7(K)
<                       IS3 = Y3(K) + Y7(K)
<                       RU3 = X3(K) - X7(K)
<                       IU3 = Y3(K) - Y7(K)
<                       RSS0 = RS0 + RS2
<                       ISS0 = IS0 + IS2
<                       RSU0 = RS0 - RS2
<                       ISU0 = IS0 - IS2
<                       RSS1 = RS1 + RS3
<                       ISS1 = IS1 + IS3
<                       RSU1 = RS1 - RS3
<                       ISU1 = IS1 - IS3
<                       RUS0 = RU0 - IU2
<                       IUS0 = IU0 + RU2
<                       RUU0 = RU0 + IU2
<                       IUU0 = IU0 - RU2
<                       RUS1 = RU1 - IU3
<                       IUS1 = IU1 + RU3
<                       RUU1 = RU1 + IU3
<                       IUU1 = IU1 - RU3
<                       T = (RUS1+IUS1)*E
<                       IUS1 = (IUS1-RUS1)*E
<                       RUS1 = T
<                       T = (RUU1+IUU1)*E
<                       IUU1 = (IUU1-RUU1)*E
<                       RUU1 = T
<                       X0(K) = RSS0 + RSS1
<                       Y0(K) = ISS0 + ISS1
<                       IF (ZERO) THEN
<                           X4(K) = RUU0 + RUU1
<                           Y4(K) = IUU0 + IUU1
<                           X2(K) = RSU0 + ISU1
<                           Y2(K) = ISU0 - RSU1
<                           X6(K) = RUS0 + IUS1
<                           Y6(K) = IUS0 - RUS1
<                           X1(K) = RSS0 - RSS1
<                           Y1(K) = ISS0 - ISS1
<                           X5(K) = RUU0 - RUU1
<                           Y5(K) = IUU0 - IUU1
<                           X3(K) = RSU0 - ISU1
<                           Y3(K) = ISU0 + RSU1
<                           X7(K) = RUS0 - IUS1
<                           Y7(K) = IUS0 + RUS1
<                       ELSE
<                           R1 = RUU0 + RUU1
<                           I1 = IUU0 + IUU1
<                           R2 = RSU0 + ISU1
<                           I2 = ISU0 - RSU1
<                           R3 = RUS0 + IUS1
<                           I3 = IUS0 - RUS1
<                           R4 = RSS0 - RSS1
<                           I4 = ISS0 - ISS1
<                           R5 = RUU0 - RUU1
<                           I5 = IUU0 - IUU1
<                           R6 = RSU0 - ISU1
<                           I6 = ISU0 + RSU1
<                           R7 = RUS0 - IUS1
<                           I7 = IUS0 + RUS1
<                           X4(K) = R1*C1 + I1*S1
<                           Y4(K) = I1*C1 - R1*S1
<                           X2(K) = R2*C2 + I2*S2
<                           Y2(K) = I2*C2 - R2*S2
<                           X6(K) = R3*C3 + I3*S3
<                           Y6(K) = I3*C3 - R3*S3
<                           X1(K) = R4*C4 + I4*S4
<                           Y1(K) = I4*C4 - R4*S4
<                           X5(K) = R5*C5 + I5*S5
<                           Y5(K) = I5*C5 - R5*S5
<                           X3(K) = R6*C6 + I6*S6
<                           Y3(K) = I6*C6 - R6*S6
<                           X7(K) = R7*C7 + I7*S7
<                           Y7(K) = I7*C7 - R7*S7
<                       END IF
<    20                 CONTINUE
<    30             CONTINUE
<    40         CONTINUE
<           IF (FOLD) THEN
<               FOLD = .FALSE.
<               K0 = (M+1-J)*SEP + 1
<               T = (C1+S1)*E
<               S1 = (C1-S1)*E
<               C1 = T
<               T = S2
<               S2 = C2
<               C2 = T
<               T = (-C3+S3)*E
<               S3 = (C3+S3)*E
<               C3 = T
<               C4 = -C4
<               T = - (C5+S5)*E
<               S5 = (-C5+S5)*E
<               C5 = T
<               T = -S6
<               S6 = -C6
<               C6 = T
<               T = (C7-S7)*E
<               S7 = - (C7+S7)*E
<               C7 = T
<               GO TO 10
<           END IF
<    50     CONTINUE
---
>             DO 30 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 20 K = L,K1,K2
>                 RS0 = X0(K) + X4(K)
>                 IS0 = Y0(K) + Y4(K)
>                 RU0 = X0(K) - X4(K)
>                 IU0 = Y0(K) - Y4(K)
>                 RS1 = X1(K) + X5(K)
>                 IS1 = Y1(K) + Y5(K)
>                 RU1 = X1(K) - X5(K)
>                 IU1 = Y1(K) - Y5(K)
>                 RS2 = X2(K) + X6(K)
>                 IS2 = Y2(K) + Y6(K)
>                 RU2 = X2(K) - X6(K)
>                 IU2 = Y2(K) - Y6(K)
>                 RS3 = X3(K) + X7(K)
>                 IS3 = Y3(K) + Y7(K)
>                 RU3 = X3(K) - X7(K)
>                 IU3 = Y3(K) - Y7(K)
>                 RSS0 = RS0 + RS2
>                 ISS0 = IS0 + IS2
>                 RSU0 = RS0 - RS2
>                 ISU0 = IS0 - IS2
>                 RSS1 = RS1 + RS3
>                 ISS1 = IS1 + IS3
>                 RSU1 = RS1 - RS3
>                 ISU1 = IS1 - IS3
>                 RUS0 = RU0 - IU2
>                 IUS0 = IU0 + RU2
>                 RUU0 = RU0 + IU2
>                 IUU0 = IU0 - RU2
>                 RUS1 = RU1 - IU3
>                 IUS1 = IU1 + RU3
>                 RUU1 = RU1 + IU3
>                 IUU1 = IU1 - RU3
>                 T = (RUS1+IUS1)*E
>                 IUS1 = (IUS1-RUS1)*E
>                 RUS1 = T
>                 T = (RUU1+IUU1)*E
>                 IUU1 = (IUU1-RUU1)*E
>                 RUU1 = T
>                 X0(K) = RSS0 + RSS1
>                 Y0(K) = ISS0 + ISS1
>                 X4(K) = RUU0 + RUU1
>                 Y4(K) = IUU0 + IUU1
>                 X2(K) = RSU0 + ISU1
>                 Y2(K) = ISU0 - RSU1
>                 X6(K) = RUS0 + IUS1
>                 Y6(K) = IUS0 - RUS1
>                 X1(K) = RSS0 - RSS1
>                 Y1(K) = ISS0 - ISS1
>                 X5(K) = RUU0 - RUU1
>                 Y5(K) = IUU0 - IUU1
>                 X3(K) = RSU0 - ISU1
>                 Y3(K) = ISU0 + RSU1
>                 X7(K) = RUS0 - IUS1
>                 Y7(K) = IUS0 + RUS1
>    20         CONTINUE
>    30       CONTINUE
>    40     CONTINUE
>         ELSE
>           DO 70 KK = K0,NS,MM8
>             DO 60 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 50 K = L,K1,K2
>                 RS0 = X0(K) + X4(K)
>                 IS0 = Y0(K) + Y4(K)
>                 RU0 = X0(K) - X4(K)
>                 IU0 = Y0(K) - Y4(K)
>                 RS1 = X1(K) + X5(K)
>                 IS1 = Y1(K) + Y5(K)
>                 RU1 = X1(K) - X5(K)
>                 IU1 = Y1(K) - Y5(K)
>                 RS2 = X2(K) + X6(K)
>                 IS2 = Y2(K) + Y6(K)
>                 RU2 = X2(K) - X6(K)
>                 IU2 = Y2(K) - Y6(K)
>                 RS3 = X3(K) + X7(K)
>                 IS3 = Y3(K) + Y7(K)
>                 RU3 = X3(K) - X7(K)
>                 IU3 = Y3(K) - Y7(K)
>                 RSS0 = RS0 + RS2
>                 ISS0 = IS0 + IS2
>                 RSU0 = RS0 - RS2
>                 ISU0 = IS0 - IS2
>                 RSS1 = RS1 + RS3
>                 ISS1 = IS1 + IS3
>                 RSU1 = RS1 - RS3
>                 ISU1 = IS1 - IS3
>                 RUS0 = RU0 - IU2
>                 IUS0 = IU0 + RU2
>                 RUU0 = RU0 + IU2
>                 IUU0 = IU0 - RU2
>                 RUS1 = RU1 - IU3
>                 IUS1 = IU1 + RU3
>                 RUU1 = RU1 + IU3
>                 IUU1 = IU1 - RU3
>                 T = (RUS1+IUS1)*E
>                 IUS1 = (IUS1-RUS1)*E
>                 RUS1 = T
>                 T = (RUU1+IUU1)*E
>                 IUU1 = (IUU1-RUU1)*E
>                 RUU1 = T
>                 X0(K) = RSS0 + RSS1
>                 Y0(K) = ISS0 + ISS1
>                 R1 = RUU0 + RUU1
>                 I1 = IUU0 + IUU1
>                 R2 = RSU0 + ISU1
>                 I2 = ISU0 - RSU1
>                 R3 = RUS0 + IUS1
>                 I3 = IUS0 - RUS1
>                 R4 = RSS0 - RSS1
>                 I4 = ISS0 - ISS1
>                 R5 = RUU0 - RUU1
>                 I5 = IUU0 - IUU1
>                 R6 = RSU0 - ISU1
>                 I6 = ISU0 + RSU1
>                 R7 = RUS0 - IUS1
>                 I7 = IUS0 + RUS1
>                 X4(K) = R1*C1 + I1*S1
>                 Y4(K) = I1*C1 - R1*S1
>                 X2(K) = R2*C2 + I2*S2
>                 Y2(K) = I2*C2 - R2*S2
>                 X6(K) = R3*C3 + I3*S3
>                 Y6(K) = I3*C3 - R3*S3
>                 X1(K) = R4*C4 + I4*S4
>                 Y1(K) = I4*C4 - R4*S4
>                 X5(K) = R5*C5 + I5*S5
>                 Y5(K) = I5*C5 - R5*S5
>                 X3(K) = R6*C6 + I6*S6
>                 Y3(K) = I6*C6 - R6*S6
>                 X7(K) = R7*C7 + I7*S7
>                 Y7(K) = I7*C7 - R7*S7
>    50         CONTINUE
>    60       CONTINUE
>    70     CONTINUE
>         END IF
>         IF (FOLD) THEN
>           FOLD = .FALSE.
>           K0 = (M+1-J)*SEP + 1
>           T = (C1+S1)*E
>           S1 = (C1-S1)*E
>           C1 = T
>           T = S2
>           S2 = C2
>           C2 = T
>           T = (-C3+S3)*E
>           S3 = (C3+S3)*E
>           C3 = T
>           C4 = -C4
>           T = - (C5+S5)*E
>           S5 = (-C5+S5)*E
>           C5 = T
>           T = -S6
>           S6 = -C6
>           C6 = T
>           T = (C7-S7)*E
>           S7 = - (C7+S7)*E
>           C7 = T
>           GO TO 10
>         END IF
>    80 CONTINUE
900c1030
< C     ==========================================
---
> C     =========================================
901a1032
> C---- Radix Prime Multi-Dimensional complex Fourier Transform kernel
903c1034,1035
< C---- Radix prime multi-dimensional complex fourier transform kernel
---
> C     Vectorisation modifications by Ian J. Tickle following discussions
> C     with program author L. Ten Eyck (San Diego Supercomputer Center).
904a1037
> C
906c1039
<       INTEGER           M,N,P,R
---
>       INTEGER M,N,P,R
909,910c1042,1043
<       REAL              X(R,P),Y(R,P)
<       INTEGER           DIM(5)
---
>       REAL X(R,P),Y(R,P)
>       INTEGER DIM(5)
913,916c1046,1049
<       REAL              ANGLE,FJM1,FMP,FP,FU,IS,IU,RS,RU,T,TWOPI,XT,YT
<       INTEGER           J,JJ,K,K0,K1,K2,KK,L,L1,MMP,MOVER2,MP,NS,NT,PM,
<      +                  PP,SEP,SIZE,U,V
<       LOGICAL           FOLD,ZERO
---
>       REAL ANGLE,FJM1,FMP,FP,FU,IS,IU,RS,RU,T,TWOPI,XT,YT
>       INTEGER J,JJ,K,K0,K1,K2,KK,L,L1,MMP,MOVER2,MP,NS,NT,PM,PP,SEP,
>      +        SIZE,U,V
>       LOGICAL FOLD,ZERO
919,920c1052,1053
<       REAL              A(18),AA(9,9),B(18),BB(9,9),C(18),IA(9),IB(9),
<      +                  RA(9),RB(9),S(18)
---
>       REAL A(18),AA(9,9),B(18),BB(9,9),C(18),IA(9),IB(9),RA(9),RB(9),
>      +     S(18)
923c1056
<       INTRINSIC         COS,REAL,SIN
---
>       INTRINSIC COS,REAL,SIN
926c1059
<       DATA              TWOPI/6.283185/
---
>       DATA TWOPI/6.283185/
945,952c1078,1085
<           FU = FU + 1.0
<           ANGLE = TWOPI*FU/FP
<           JJ = P - U
<           A(U) = COS(ANGLE)
<           B(U) = SIN(ANGLE)
<           A(JJ) = A(U)
<           B(JJ) = -B(U)
<    10     CONTINUE
---
>         FU = FU + 1.0
>         ANGLE = TWOPI*FU/FP
>         JJ = P - U
>         A(U) = COS(ANGLE)
>         B(U) = SIN(ANGLE)
>         A(JJ) = A(U)
>         B(JJ) = -B(U)
>    10 CONTINUE
954,959c1087,1092
<           DO 20 V = 1,PP
<               JJ = U*V - U*V/P*P
<               AA(V,U) = A(JJ)
<               BB(V,U) = B(JJ)
<    20         CONTINUE
<    30     CONTINUE
---
>         DO 20 V = 1,PP
>           JJ = U*V - U*V/P*P
>           AA(V,U) = A(JJ)
>           BB(V,U) = B(JJ)
>    20   CONTINUE
>    30 CONTINUE
962,976c1095,1109
<       DO 140 J = 1,MOVER2
<           FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
<           K0 = (J-1)*SEP + 1
<           FJM1 = FJM1 + 1.0
<           ANGLE = TWOPI*FJM1/FMP
<           ZERO = ANGLE .EQ. 0.0
<           IF (.NOT.ZERO) THEN
<               C(1) = COS(ANGLE)
<               S(1) = SIN(ANGLE)
<               DO 40 U = 2,PM
<                   C(U) = C(U-1)*C(1) - S(U-1)*S(1)
<                   S(U) = S(U-1)*C(1) + C(U-1)*S(1)
<    40             CONTINUE
<           END IF
<    50     CONTINUE
---
>       DO 210 J = 1,MOVER2
>         FOLD = J .GT. 1 .AND. 2*J .LT. M + 2
>         K0 = (J-1)*SEP + 1
>         FJM1 = FJM1 + 1.0
>         ANGLE = TWOPI*FJM1/FMP
>         ZERO = ANGLE .EQ. 0.0
>         IF (.NOT.ZERO) THEN
>           C(1) = COS(ANGLE)
>           S(1) = SIN(ANGLE)
>           DO 40 U = 2,PM
>             C(U) = C(U-1)*C(1) - S(U-1)*S(1)
>             S(U) = S(U-1)*C(1) + C(U-1)*S(1)
>    40     CONTINUE
>         END IF
>    50   CONTINUE
977a1111
>         IF (ZERO) THEN
979,1044c1113,1218
<               DO 110 L = KK,NT,L1
<                   K1 = L + SIZE
<                   DO 100 K = L,K1,K2
<                       XT = X(K,1)
<                       YT = Y(K,1)
<                       RS = X(K,2) + X(K,P)
<                       IS = Y(K,2) + Y(K,P)
<                       RU = X(K,2) - X(K,P)
<                       IU = Y(K,2) - Y(K,P)
<                       DO 60 U = 1,PP
<                           RA(U) = AA(U,1)*RS + XT
<                           IA(U) = AA(U,1)*IS + YT
<                           RB(U) = BB(U,1)*RU
<                           IB(U) = BB(U,1)*IU
<    60                     CONTINUE
<                       XT = XT + RS
<                       YT = YT + IS
<                       DO 80 U = 2,PP
<                           JJ = P - U
<                           RS = X(K,U+1) + X(K,JJ+1)
<                           IS = Y(K,U+1) + Y(K,JJ+1)
<                           RU = X(K,U+1) - X(K,JJ+1)
<                           IU = Y(K,U+1) - Y(K,JJ+1)
<                           XT = XT + RS
<                           YT = YT + IS
<                           DO 70 V = 1,PP
<                               RA(V) = AA(V,U)*RS + RA(V)
<                               IA(V) = AA(V,U)*IS + IA(V)
<                               RB(V) = BB(V,U)*RU + RB(V)
<                               IB(V) = BB(V,U)*IU + IB(V)
<    70                         CONTINUE
<    80                     CONTINUE
<                       X(K,1) = XT
<                       Y(K,1) = YT
<                       DO 90 U = 1,PP
<                           JJ = P - U
<                           IF (ZERO) THEN
<                               X(K,U+1) = RA(U) + IB(U)
<                               Y(K,U+1) = IA(U) - RB(U)
<                               X(K,JJ+1) = RA(U) - IB(U)
<                               Y(K,JJ+1) = IA(U) + RB(U)
<                           ELSE
<                               XT = RA(U) + IB(U)
<                               YT = IA(U) - RB(U)
<                               X(K,U+1) = C(U)*XT + S(U)*YT
<                               Y(K,U+1) = C(U)*YT - S(U)*XT
<                               XT = RA(U) - IB(U)
<                               YT = IA(U) + RB(U)
<                               X(K,JJ+1) = C(JJ)*XT + S(JJ)*YT
<                               Y(K,JJ+1) = C(JJ)*YT - S(JJ)*XT
<                           END IF
<    90                     CONTINUE
<   100                 CONTINUE
<   110             CONTINUE
<   120         CONTINUE
<           IF (FOLD) THEN
<               FOLD = .FALSE.
<               K0 = (M+1-J)*SEP + 1
<               DO 130 U = 1,PM
<                   T = C(U)*A(U) + S(U)*B(U)
<                   S(U) = -S(U)*A(U) + C(U)*B(U)
<                   C(U) = T
<   130             CONTINUE
<               GO TO 50
<           END IF
<   140     CONTINUE
---
>             DO 110 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 100 K = L,K1,K2
>                 XT = X(K,1)
>                 YT = Y(K,1)
>                 RS = X(K,2) + X(K,P)
>                 IS = Y(K,2) + Y(K,P)
>                 RU = X(K,2) - X(K,P)
>                 IU = Y(K,2) - Y(K,P)
>                 DO 60 U = 1,PP
>                   RA(U) = AA(U,1)*RS + XT
>                   IA(U) = AA(U,1)*IS + YT
>                   RB(U) = BB(U,1)*RU
>                   IB(U) = BB(U,1)*IU
>    60           CONTINUE
>                 XT = XT + RS
>                 YT = YT + IS
>                 DO 80 U = 2,PP
>                   JJ = P - U
>                   RS = X(K,U+1) + X(K,JJ+1)
>                   IS = Y(K,U+1) + Y(K,JJ+1)
>                   RU = X(K,U+1) - X(K,JJ+1)
>                   IU = Y(K,U+1) - Y(K,JJ+1)
>                   XT = XT + RS
>                   YT = YT + IS
>                   DO 70 V = 1,PP
>                     RA(V) = AA(V,U)*RS + RA(V)
>                     IA(V) = AA(V,U)*IS + IA(V)
>                     RB(V) = BB(V,U)*RU + RB(V)
>                     IB(V) = BB(V,U)*IU + IB(V)
>    70             CONTINUE
>    80           CONTINUE
>                 X(K,1) = XT
>                 Y(K,1) = YT
>                 DO 90 U = 1,PP
>                   JJ = P - U
>                   X(K,U+1) = RA(U) + IB(U)
>                   Y(K,U+1) = IA(U) - RB(U)
>                   X(K,JJ+1) = RA(U) - IB(U)
>                   Y(K,JJ+1) = IA(U) + RB(U)
>    90           CONTINUE
>   100         CONTINUE
>   110       CONTINUE
>   120     CONTINUE
>         ELSE
>           DO 190 KK = K0,NS,MMP
>             DO 180 L = KK,NT,L1
>               K1 = L + SIZE
>               DO 170 K = L,K1,K2
>                 XT = X(K,1)
>                 YT = Y(K,1)
>                 RS = X(K,2) + X(K,P)
>                 IS = Y(K,2) + Y(K,P)
>                 RU = X(K,2) - X(K,P)
>                 IU = Y(K,2) - Y(K,P)
>                 DO 130 U = 1,PP
>                   RA(U) = AA(U,1)*RS + XT
>                   IA(U) = AA(U,1)*IS + YT
>                   RB(U) = BB(U,1)*RU
>                   IB(U) = BB(U,1)*IU
>   130           CONTINUE
>                 XT = XT + RS
>                 YT = YT + IS
>                 DO 150 U = 2,PP
>                   JJ = P - U
>                   RS = X(K,U+1) + X(K,JJ+1)
>                   IS = Y(K,U+1) + Y(K,JJ+1)
>                   RU = X(K,U+1) - X(K,JJ+1)
>                   IU = Y(K,U+1) - Y(K,JJ+1)
>                   XT = XT + RS
>                   YT = YT + IS
>                   DO 140 V = 1,PP
>                     RA(V) = AA(V,U)*RS + RA(V)
>                     IA(V) = AA(V,U)*IS + IA(V)
>                     RB(V) = BB(V,U)*RU + RB(V)
>                     IB(V) = BB(V,U)*IU + IB(V)
>   140             CONTINUE
>   150           CONTINUE
>                 X(K,1) = XT
>                 Y(K,1) = YT
>                 DO 160 U = 1,PP
>                   JJ = P - U
>                   XT = RA(U) + IB(U)
>                   YT = IA(U) - RB(U)
>                   X(K,U+1) = C(U)*XT + S(U)*YT
>                   Y(K,U+1) = C(U)*YT - S(U)*XT
>                   XT = RA(U) - IB(U)
>                   YT = IA(U) + RB(U)
>                   X(K,JJ+1) = C(JJ)*XT + S(JJ)*YT
>                   Y(K,JJ+1) = C(JJ)*YT - S(JJ)*XT
>   160           CONTINUE
>   170         CONTINUE
>   180       CONTINUE
>   190     CONTINUE
>         END IF
>         IF (FOLD) THEN
>           FOLD = .FALSE.
>           K0 = (M+1-J)*SEP + 1
>           DO 200 U = 1,PM
>             T = C(U)*A(U) + S(U)*B(U)
>             S(U) = -S(U)*A(U) + C(U)*B(U)
>             C(U) = T
>   200     CONTINUE
>           GO TO 50
>         END IF
>   210 CONTINUE
1406c1580
<               call ccperr(1,' stop in fftlib.for 2000')
---
>               CALL CCPERR (1, 'STOP')
1606c1780
<           call ccperr(1,' stop in fftlib.for 3000')
---
>           CALL CCPERR (1, 'STOP')
