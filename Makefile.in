
# Makefile tail for CCP4 Library.  This will be modified by configure.

# $Id$

# Usage: make                 - to make the library in this directory
#        make <module>        - to make that particular module
#        make install         - to copy the results into binary directory
#        make test            - to compile and run the library testbed

# The following <module>'s are available:
#
# all      - (default) make entire CCP4 library
# cmtz     - make C language library for MTZ i/o only
# cmap     - make C language library for CCP4 map i/o only
# csym     - make C language library for symmetry only
# mmdb     - make Eugene's mmdb library for coordinates
# cmtz_py  - make shared library for use as python module
# cmap_py  - make shared library for use as python module
# csym_py  - make shared library for use as python module
# mmdb_py  - make shared library for use as python module
# cmtz_tcl  - make shared library for use as tcl module
# cmap_tcl  - make shared library for use as tcl module
# csym_tcl  - make shared library for use as tcl module
# mmdb_tcl  - make shared library for use as tcl module
# cmtz_pl  - make shared library for use as perl module
# cmap_pl  - make shared library for use as perl module
# csym_pl  - make shared library for use as perl module
# umtz     - make micro C language library for MTZ
# mmtz     - make milli C language library for MTZ

##### variable definitions ######

# The following variables are expected to be set by configure:
# top_srcdir libdir bindir FC FFLAGS CC CFLAGS RANLIB LNS M4 F
# INSTALL_PROGRAM INSTALL_DATA SHARE_LIB SHARE_INST

SHELL       = /bin/sh
srcdir	    = $(top_srcdir)/lib/src
mmdbsrcdir  = $(top_srcdir)/lib/src/mmdb
LIB_DIR     = .
fsplit_dir  = $(srcdir)#directory where fsplit has been made/lives

# how to add a member to an archive (second and first args
# respectively); this might need to be set by configure:
AR          = ar r

# On some systems (Concentrix, for instance), for files with trailing
# comments, fsplit generates a file containing only comments and the
# compiler barfs on it.  Here's an abbreviation for deleting any such
# files generated, assuming two possible forms of the name generated:
# caveat naming routines!  Always use this after fsplit for safety...
RMEMPTY = rm -f ZZZ*.$(F) zzz*.$(F)

# define the final library files

L           = $(LIB_DIR)/libccp4.a
LCMTZ       = $(LIB_DIR)/libcmtz.a
LCMAP       = $(LIB_DIR)/libcmap.a
LCSYM       = $(LIB_DIR)/libcsym.a
LMMDB       = $(LIB_DIR)/libmmdb.a
CMTZPYMODULE = $(LIB_DIR)/cmtzmodule.so
CMAPPYMODULE = $(LIB_DIR)/cmapmodule.so
CSYMPYMODULE = $(LIB_DIR)/csymmodule.so
MMDBPYMODULE = $(LIB_DIR)/MMDBc.so
CMTZTCLPACKAGE = $(LIB_DIR)/cmtz_tcl.so
CMAPTCLPACKAGE = $(LIB_DIR)/cmap_tcl.so
CSYMTCLPACKAGE = $(LIB_DIR)/csym_tcl.so
MMDBTCLPACKAGE = $(LIB_DIR)/mmdb_tcl.so
CMTZPLPACKAGE = $(LIB_DIR)/cmtz_pl.so
CMAPPLPACKAGE = $(LIB_DIR)/cmap_pl.so
CSYMPLPACKAGE = $(LIB_DIR)/csym_pl.so
LUMTZ       = $(LIB_DIR)/libumtz.a
LMMTZ       = $(LIB_DIR)/libmmtz.a

MMDBOBJS = bfgs_min.o mmdb_chain.o    mmdb_manager.o  mmdb_symop.o \
           file_.o    mmdb_cifdefs.o  mmdb_mask.o     mmdb_title.o \
           linalg_.o  mmdb_coormngr.o mmdb_mmcif.o    mmdb_utils.o \
           machine_.o mmdb_cryst.o    mmdb_model.o    stream_.o \
           mattype_.o mmdb_file.o     mmdb_rwbrook.o  mmdb_atom.o \
           mmdb_graph.o  mmdb_selmngr.o  mmdb_align.o \
           mmdb_tables.o math_.o mmdb_sbase.o mmdb_uddata.o \
           mmdb_xml.o   mmdb_bondmngr.o mmdb_ficif.o
CORELIBOBJS = library_err.o library_file.o  library_utils.o \
              ccp4_array.o ccp4_parser.o cvecmat.o
CGENERALOBJS = ccp4_program.o ccp4_general.o
CMTZOBJS = cmtzlib.o
UMTZOBJS = umtzlib.o
MMTZOBJS = mmtzlib.o
CMAPOBJS = cmap_accessor.o cmap_close.o cmap_data.o cmap_header.o \
           cmap_labels.o cmap_open.o cmap_skew.o cmap_stats.o \
           cmap_symop.o
CSYMOBJS = csymlib.o 
CUCOBJS = ccp4_unitcell.o
FINTERFACEOBJS = cmtzlib_f.o csymlib_f.o ccp4_parser_f.o library_f.o \
                ccp4_diskio_f.o ccp4_general_f.o ccp4_unitcell_f.o cmaplib_f.o
FORTRANOBJS =  $L(parser.o) $L(fftlib.o) $L(lgglib.o) $L(libhtml.o) $L(modlib.o) \
               $L(plotsubs.o) $L(plot84lib.o) $L(pxxml.o) $L(ccplib.o) $L(unix.o) \
               $L(sorting_main.o) $L(rwbrook.o) $(CIFLIBOBJS) $L(harvlib.o) \
               $L(keyparse.o) $L(pack_f.o) $L(pack_c.o)
CMTZPYOBJS = cmtzlib_python_wrap.o
CMAPPYOBJS = cmaplib_python_wrap.o
CSYMPYOBJS = csymlib_python_wrap.o
MMDBPYOBJS = mmdb_python_wrap.o
CMTZTCLOBJS = cmtzlib_tcl_wrap.o
CMAPTCLOBJS = cmaplib_tcl_wrap.o
CSYMTCLOBJS = csymlib_tcl_wrap.o
MMDBTCLOBJS = mmdb_tcl_wrap.o
CMTZPLOBJS = cmtzlib_pl_wrap.o
CMAPPLOBJS = cmaplib_pl_wrap.o
CSYMPLOBJS = csymlib_pl_wrap.o

##### Makefile targets ######

all:  fsplit $L

$L : cobjs $(FORTRANOBJS)
# we could presumably avoid the next two steps if we haven't changed anything
	$(RANLIB) $@
# maybe create shared library
	$(SHARE_LIB)

cobjs: $(MMDBOBJS) $(CORELIBOBJS) $(CGENERALOBJS) $(CUCOBJS) \
     $(CMTZOBJS) $(CMAPOBJS) $(CSYMOBJS) $(FINTERFACEOBJS)
	$(AR) $L $?

# cmtz library only

cmtz: $(LCMTZ)

$(LCMTZ): $(CMTZOBJS) $(CORELIBOBJS)
	$(AR) $(LCMTZ) $?
	$(RANLIB) $@
# maybe create shared library - fixme!

# umtz library only

umtz: $(LUMTZ)

$(LUMTZ): $(UMTZOBJS) $(CORELIBOBJS)
	$(AR) $(LUMTZ) $?
	$(RANLIB) $@

# mmtz library only

mmtz: $(LMMTZ)

$(LMMTZ): $(MMTZOBJS) $(UMTZOBJS) $(CORELIBOBJS)
	$(AR) $(LMMTZ) $?
	$(RANLIB) $@

# cmap library only

cmap: $(LCMAP)

$(LCMAP): $(CMAPOBJS) $(CORELIBOBJS)
	$(AR) $(LCMAP) $?
	$(RANLIB) $@

# csym library only

csym: $(LCSYM)

$(LCSYM): $(CSYMOBJS) $(CORELIBOBJS)
	$(AR) $(LCSYM) $?
	$(RANLIB) $@
# maybe create shared library - fixme!

# Eugene's mmdb library for coordinates

mmdb: $(LMMDB)

$(LMMDB): $(MMDBOBJS)
	$(AR) $(LMMDB) $?
	$(RANLIB) $@
# maybe create shared library - fixme!

cmtz_py: $(CMTZPYMODULE)

$(CMTZPYMODULE): $(LCMTZ) $(CMTZPYOBJS)
	$(SHARE_MODULE) $(LCMTZ) $(CMTZPYOBJS) -o $(CMTZPYMODULE)

cmap_py: $(CMAPPYMODULE)

$(CMAPPYMODULE): $(LCMAP) $(CMAPPYOBJS)
	$(SHARE_MODULE) $(LCMAP) $(CMAPPYOBJS) -o $(CMAPPYMODULE)

csym_py: $(CSYMPYMODULE)

$(CSYMPYMODULE): $(CSYMOBJS) $(CORELIBOBJS) $(CSYMPYOBJS)
	$(SHARE_MODULE) $(CSYMOBJS) $(CORELIBOBJS) $(CSYMPYOBJS) -o $(CSYMPYMODULE)

mmdb_py: $(MMDBPYMODULE)

$(MMDBPYMODULE): $(LMMDB) $(MMDBPYOBJS)
	$(SHARE_MODULE) $(LMMDB) $(MMDBPYOBJS) -o $(MMDBPYMODULE) -lC

cmtz_tcl: $(CMTZTCLPACKAGE)

$(CMTZTCLPACKAGE): $(LCMTZ) $(CMTZTCLOBJS)
	$(SHARE_MODULE) $(LCMTZ) $(CMTZTCLOBJS) -o $(CMTZTCLPACKAGE)

cmap_tcl: $(CMAPTCLPACKAGE)

$(CMAPTCLPACKAGE): $(LCMAP) $(CMAPTCLOBJS)
	$(SHARE_MODULE) $(LCMAP) $(CMAPTCLOBJS) -o $(CMAPTCLPACKAGE)

csym_tcl: $(CSYMTCLPACKAGE)

$(CSYMTCLPACKAGE): $(CSYMOBJS) $(CORELIBOBJS) $(CSYMTCLOBJS)
	$(SHARE_MODULE) $(CSYMOBJS) $(CORELIBOBJS) $(CSYMTCLOBJS) -o $(CSYMTCLPACKAGE)

mmdb_tcl: $(MMDBTCLPACKAGE)

$(MMDBTCLPACKAGE): $(LMMDB) $(MMDBTCLOBJS)
	$(SHARE_MODULE) $(LMMDB) $(MMDBTCLOBJS) -o $(MMDBTCLPACKAGE) -lC

cmtz_pl: $(CMTZPLPACKAGE)

$(CMTZPLPACKAGE): $(LCMTZ) $(CMTZPLOBJS)
	$(SHARE_MODULE) $(LCMTZ) $(CMTZPLOBJS) -o $(CMTZPLPACKAGE)

cmap_pl: $(CMAPPLPACKAGE)

$(CMAPPLPACKAGE): $(LCMAP) $(CMAPPLOBJS)
	$(SHARE_MODULE) $(LCMAP) $(CMAPPLOBJS) -o $(CMAPPLPACKAGE)

csym_pl: $(CSYMPLPACKAGE)

$(CSYMPLPACKAGE): $(CSYMOBJS) $(CORELIBOBJS) $(CSYMPLOBJS)
	$(SHARE_MODULE) $(CSYMOBJS) $(CORELIBOBJS) $(CSYMPLOBJS) -o $(CSYMPLPACKAGE)

##### How to compile stuff #####

# C library

$(MMDBOBJS): 
	$(CXX) $(CXXFLAGS) -I$(mmdbsrcdir) -c $(mmdbsrcdir)/`basename $@ .o`.cpp

$(CORELIBOBJS) $(CGENERALOBJS) $(CMTZOBJS) $(CMAPOBJS) $(CUCOBJS) \
            $(CSYMOBJS) $(FINTERFACEOBJS) $(UMTZOBJS) $(MMTZOBJS): 
	$(CC) $(CFLAGS) -I$(srcdir) -c $(srcdir)/`basename $@ .o`.c

$(CMTZPYOBJS) $(CMAPPYOBJS) $(CSYMPYOBJS): 
	$(CC) $(CFLAGS) -I$(srcdir) -I$(PYTHON_INCLUDE) -c $(srcdir)/`basename $@ .o`.c

$(MMDBPYOBJS): 
	$(CXX) $(CXXFLAGS) -I$(mmdbsrcdir) -I$(PYTHON_INCLUDE) \
            -c $(mmdbsrcdir)/`basename $@ .o`.cpp

$(MMDBTCLOBJS): 
	$(CXX) $(CXXFLAGS) -I$(mmdbsrcdir) -I$(TCL_INCLUDE) \
            -c $(mmdbsrcdir)/`basename $@ .o`.cpp

$(CMTZTCLOBJS) $(CMAPTCLOBJS) $(CSYMTCLOBJS): 
	$(CC) $(CFLAGS) -I$(srcdir) -I$(TCL_INCLUDE) -c $(srcdir)/`basename $@ .o`.c

$(CMTZPLOBJS) $(CMAPPLOBJS) $(CSYMPLOBJS): 
	$(CC) $(CFLAGS) -I$(srcdir) -I$(PERL_INCLUDE) -c $(srcdir)/`basename $@ .o`.c

# Fortran code

#test to see if fsplit is in fsplit_dir already otherwise make it if you can
fsplit : $(srcdir)/fsplit.c
	test ! -x $(fsplit_dir)/fsplit && $(CC) $(CFLAGS) -o $(fsplit_dir)/fsplit fsplit.c || true 

$L(parser.o) : $(srcdir)/parser.f
	-rm -rf parser.dir; mkdir parser.dir
	cd parser.dir && $(fsplit_dir)/fsplit $(srcdir)/parser.f && $(RMEMPTY);
# `-' for convex, sigh
	-if test ! -f parser.dir/parser.$F; then \
	  echo '      SUBROUTINE PRSER' > parser.dir/parser.$F; \
	  echo '      END' >> parser.dir/parser.$F; \
	fi
	cd parser.dir && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f parser.dir/*.o
parser : parser.o
	$(RANLIB) $L

$L(ccplib.o) : $(srcdir)/ccplib.f
	-rm -rf ccplib.dir; mkdir ccplib.dir
	echo '      SUBROUTINE CCPLIB' > ccplib.dir/ccplib.$F
	echo '      END' >> ccplib.dir/ccplib.$F
	cd ccplib.dir && $(fsplit_dir)/fsplit $(srcdir)/ccplib.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f ccplib.dir/*.o
ccplib : ccplib.o
	$(RANLIB) $L

$L(lgglib.o) : $(srcdir)/lgglib.f
	-rm -rf lgglib.dir; mkdir lgglib.dir
	echo '      SUBROUTINE LGGLIB' > lgglib.dir/lgglib.$F
	echo '      END' >> lgglib.dir/lgglib.$F
	cd lgglib.dir && $(fsplit_dir)/fsplit $(srcdir)/lgglib.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f lgglib.dir/*.o
lgglib : lgglib.o
	$(RANLIB) $L

$L(plot84lib.o) : $(srcdir)/plot84lib.f
	-rm -rf plot84lib.dir; mkdir plot84lib.dir
	echo '      SUBROUTINE PLOT84LIB' > plot84lib.dir/plot84lib.$F
	echo '      END' >> plot84lib.dir/plot84lib.$F
	cd plot84lib.dir && $(fsplit_dir)/fsplit $(srcdir)/plot84lib.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f plot84lib.dir/*.o
plot84lib : plot84lib.o
	$(RANLIB) $L

$L(libhtml.o) : $(srcdir)/libhtml.f
	-rm -rf libhtml.dir; mkdir libhtml.dir
	echo '      SUBROUTINE LIBHTML' > libhtml.dir/libhtml.$F
	echo '      END' >> libhtml.dir/libhtml.$F
	cd libhtml.dir && $(fsplit_dir)/fsplit $(srcdir)/libhtml.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f libhtml.dir/*.o
libhtml : libhtml.o
	$(RANLIB) $L

$L(pxxml.o) : $(srcdir)/pxxml.f
	-rm -rf pxxml.dir; mkdir pxxml.dir
	echo '      SUBROUTINE PXXML' > pxxml.dir/pxxml.$F
	echo '      END' >> pxxml.dir/pxxml.$F
	cd pxxml.dir && $(fsplit_dir)/fsplit $(srcdir)/pxxml.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f pxxml.dir/*.o
pxxml : pxxml.o
	$(RANLIB) $L

$L(rwbrook.o) : $(srcdir)/rwbrook.f
	-rm -rf rwbrook.dir; mkdir rwbrook.dir
	echo '      SUBROUTINE RWBROOK' > rwbrook.dir/rwbrook.$F
	echo '      END' >> rwbrook.dir/rwbrook.$F
	cd rwbrook.dir && $(fsplit_dir)/fsplit $(srcdir)/rwbrook.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f rwbrook.dir/*.o
rwbrook : rwbrook.o
	$(RANLIB) $L

$L(cciflib.o) : $(srcdir)/cciflib.f
	-rm -rf cciflib.dir; mkdir cciflib.dir
	echo '      SUBROUTINE CCIFLIB' > cciflib.dir/cciflib.$F
	echo '      END' >> cciflib.dir/cciflib.$F
	cd cciflib.dir && $(fsplit_dir)/fsplit $(srcdir)/cciflib.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) -I$(srcdir) $$i; done\
	  && $(AR) ../$L *.o
	rm -f cciflib.dir/*.o
cciflib : cciflib.o
	$(RANLIB) $L

$L(harvlib.o) : $(srcdir)/harvlib.f
	-rm -rf harvlib.dir; mkdir harvlib.dir
	echo '      SUBROUTINE HARVLIB' > harvlib.dir/harvlib.$F
	echo '      END' >> harvlib.dir/harvlib.$F
	cd harvlib.dir && $(fsplit_dir)/fsplit $(srcdir)/harvlib.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) -I$(srcdir) $$i; done\
	  && $(AR) ../$L *.o
	rm -f harvlib.dir/*.o
harvlib : harvlib.o
	$(RANLIB) $L

$L(keyparse.o) : $(srcdir)/keyparse.f
	-rm -rf keyparse.dir; mkdir keyparse.dir
	echo '      SUBROUTINE KEYPARSE' > keyparse.dir/keyparse.$F
	echo '      END' >> keyparse.dir/keyparse.$F
	cd keyparse.dir && $(fsplit_dir)/fsplit $(srcdir)/keyparse.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f keyparse.dir/*.o
keyparse : keyparse.o
	$(RANLIB) $L

#  The image (un)packing routines which were needed for mosflm and are needed
#  for ipdisp. May be useful but could be moved. 
$L(pack_c.o):   $(srcdir)/pack_c.c $(srcdir)/pack_c.h
	$(CC) $(CFLAGS) -I$(srcdir) -c $(srcdir)/pack_c.c
	$(AR) $L pack_c.o && rm pack_c.o
$L(pack_f.o):   $(srcdir)/pack_f.f
	$(FC) -c $(FFLAGS) $(srcdir)/pack_f.$(F) && $(AR) $(L) pack_f.o \
          && rm pack_f.o
pack:   $L(pack_c.o) $L(pack_f.o)
	$(RANLIB) $(L) 

$L(sorting_main.o) : $(srcdir)/sorting_main.f
	-rm -rf sorting_main.dir; mkdir sorting_main.dir
	echo '      SUBROUTINE SORTING_MAIN' > sorting_main.dir/sorting_main.$F
	echo '      END' >> sorting_main.dir/sorting_main.$F
	cd sorting_main.dir && $(fsplit_dir)/fsplit $(srcdir)/sorting_main.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f sorting_main.dir/*.o
sorting_main : sorting_main.o
	$(RANLIB) $L

$L(plotsubs.o) : $(srcdir)/plotsubs.f
	-rm -rf plotsubs.dir; mkdir plotsubs.dir
	echo '      SUBROUTINE PLOTSUBS' > plotsubs.dir/plotsubs.$F
	echo '      END' >> plotsubs.dir/plotsubs.$F
	cd plotsubs.dir && $(fsplit_dir)/fsplit $(srcdir)/plotsubs.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f plotsubs.dir/*.o
plotsubs : plotsubs.o
	$(RANLIB) $L

$L(modlib.o) : $(srcdir)/modlib.f
	-rm -rf modlib.dir; mkdir modlib.dir
	echo '      SUBROUTINE MODLIB' > modlib.dir/modlib.$F
	echo '      END' >> modlib.dir/modlib.$F
	cd modlib.dir && $(fsplit_dir)/fsplit $(srcdir)/modlib.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f modlib.dir/*.o
modlib : modlib.o
	$(RANLIB) $L

$L(fftlib.o) : $(srcdir)/fftlib.f
	-rm -rf fftlib.dir; mkdir fftlib.dir
	echo '      SUBROUTINE FFTLIB' > fftlib.dir/fftlib.$F
	echo '      END' >> fftlib.dir/fftlib.$F
	cd fftlib.dir && $(fsplit_dir)/fsplit $(srcdir)/fftlib.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done \
	  && $(AR) ../$L *.o
	rm -f fftlib.dir/*.o
fftlib : fftlib.o
	$(RANLIB) $L

# the unix-specific bits need preprocessing for different unix variants
unix.f : $(srcdir)/unix.m4
	$(M4) $(srcdir)/unix.m4 >unix.f
# this shouldn't depend on unix.f since we zap that each time
$L(unix.o) : $(srcdir)/unix.m4
	$(M4) $(srcdir)/unix.m4 >unix.f
	-rm -rf unix.dir; mkdir unix.dir
	echo '      SUBROUTINE UNIX' > unix.dir/unix.f
	echo '      END' >> unix.dir/unix.f
	cd unix.dir && $(fsplit_dir)/fsplit ../unix.f >/dev/null && $(RMEMPTY) && \
	  for i in `pwd`/*.$F; do \
	    $(FC) -c $(FFLAGS) $$i; done\
	  && $(AR) ../$L *.o
	rm -f unix.dir/*.o 
unix : unix.o
	$(RANLIB) $L

### SWIG stuff ###

$(srcdir)/cmtzlib_python_wrap.c: $(srcdir)/cmtzlib.i $(srcdir)/cmtzlib.h
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -python -dhtml \
           -o $(srcdir)/cmtzlib_python_wrap.c $(srcdir)/cmtzlib.i

$(srcdir)/cmaplib_python_wrap.c: $(srcdir)/cmaplib.i $(srcdir)/cmaplib.h
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -v -python -dhtml \
           -o $(srcdir)/cmaplib_python_wrap.c $(srcdir)/cmaplib.i

$(srcdir)/csymlib_python_wrap.c: $(srcdir)/csymlib.i $(srcdir)/csymlib.h
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -v -python -dhtml \
           -o $(srcdir)/csymlib_python_wrap.c $(srcdir)/csymlib.i

# -shadow produces a file MMDB.py
$(mmdbsrcdir)/mmdb_python_wrap.cpp: $(mmdbsrcdir)/mmdb_python.i
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -c++ -shadow -python \
            -o $(mmdbsrcdir)/mmdb_python_wrap.cpp $(mmdbsrcdir)/mmdb_python.i

$(srcdir)/cmtzlib_tcl_wrap.c: $(srcdir)/cmtzlib.i $(srcdir)/cmtzlib.h
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -tcl -dhtml \
           -o $(srcdir)/cmtzlib_tcl_wrap.c $(srcdir)/cmtzlib.i

$(srcdir)/cmaplib_tcl_wrap.c: $(srcdir)/cmaplib.i $(srcdir)/cmaplib.h
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -tcl -dhtml \
           -o $(srcdir)/cmaplib_tcl_wrap.c $(srcdir)/cmaplib.i

$(srcdir)/csymlib_tcl_wrap.c: $(srcdir)/csymlib.i $(srcdir)/csymlib.h
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -tcl -dhtml \
           -o $(srcdir)/csymlib_tcl_wrap.c $(srcdir)/csymlib.i

$(mmdbsrcdir)/mmdb_tcl_wrap.cpp: $(mmdbsrcdir)/mmdb_python.i
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -c++ -tcl8 \
            -o $(mmdbsrcdir)/mmdb_tcl_wrap.cpp $(mmdbsrcdir)/mmdb_python.i

$(srcdir)/cmtzlib_pl_wrap.c: $(srcdir)/cmtzlib.i $(srcdir)/cmtzlib.h
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -perl5 -dhtml \
           -o $(srcdir)/cmtzlib_pl_wrap.c $(srcdir)/cmtzlib.i

$(srcdir)/cmaplib_pl_wrap.c: $(srcdir)/cmaplib.i $(srcdir)/cmaplib.h
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -perl5 -dhtml \
           -o $(srcdir)/cmaplib_pl_wrap.c $(srcdir)/cmaplib.i

$(srcdir)/csymlib_pl_wrap.c: $(srcdir)/csymlib.i $(srcdir)/csymlib.h
	/ccpstaff/ccp4/mdw/cmtz/swig/swig -perl5 -dhtml \
           -o $(srcdir)/csymlib_pl_wrap.c $(srcdir)/csymlib.i

#
# Dependencies
#

bfgs_min.o:       $(mmdbsrcdir)/bfgs_min.cpp
mmdb_chain.o:     $(mmdbsrcdir)/mmdb_chain.cpp
mmdb_manager.o:   $(mmdbsrcdir)/mmdb_manager.cpp
mmdb_symop.o:     $(mmdbsrcdir)/mmdb_symop.cpp
file_.o:          $(mmdbsrcdir)/file_.cpp
mmdb_cifdefs.o:   $(mmdbsrcdir)/mmdb_cifdefs.cpp
mmdb_mask.o:      $(mmdbsrcdir)/mmdb_mask.cpp
mmdb_title.o:     $(mmdbsrcdir)/mmdb_title.cpp
linalg_.o:        $(mmdbsrcdir)/linalg_.cpp
mmdb_coormngr.o:  $(mmdbsrcdir)/mmdb_coormngr.cpp
mmdb_mmcif.o:     $(mmdbsrcdir)/mmdb_mmcif.cpp
mmdb_utils.o:     $(mmdbsrcdir)/mmdb_utils.cpp
machine_.o:       $(mmdbsrcdir)/machine_.cpp
mmdb_cryst.o:     $(mmdbsrcdir)/mmdb_cryst.cpp
mmdb_model.o:     $(mmdbsrcdir)/mmdb_model.cpp
stream_.o:        $(mmdbsrcdir)/stream_.cpp
mattype_.o:       $(mmdbsrcdir)/mattype_.cpp
mmdb_file.o:      $(mmdbsrcdir)/mmdb_file.cpp
mmdb_rwbrook.o:   $(mmdbsrcdir)/mmdb_rwbrook.cpp
mmdb_atom.o:      $(mmdbsrcdir)/mmdb_atom.cpp
mmdb_graph.o:     $(mmdbsrcdir)/mmdb_graph.cpp
mmdb_selmngr.o:   $(mmdbsrcdir)/mmdb_selmngr.cpp
mmdb_align.o:     $(mmdbsrcdir)/mmdb_align.cpp
mmdb_tables.o:    $(mmdbsrcdir)/mmdb_tables.cpp
mmdb_sbase.o:     $(mmdbsrcdir)/mmdb_sbase.cpp
math_.o:          $(mmdbsrcdir)/math_.cpp
mmdb_bondmngr.o:  $(mmdbsrcdir)/mmdb_bondmngr.cpp
mmdb_uddata.o:    $(mmdbsrcdir)/mmdb_uddata.cpp
mmdb_xml.o:       $(mmdbsrcdir)/mmdb_xml.cpp
mmdb_ficif.o:     $(mmdbsrcdir)/mmdb_ficif.cpp

library_err.o:    $(srcdir)/library_err.c
library_f.o:      $(srcdir)/library_f.c
library_file.o:   $(srcdir)/library_file.c
library_utils.o:  $(srcdir)/library_utils.c
ccp4_array.o:     $(srcdir)/ccp4_array.c $(srcdir)/ccp4_array.h
ccp4_diskio_f.o:  $(srcdir)/ccp4_diskio_f.c
ccp4_parser.o :   $(srcdir)/ccp4_parser.c $(srcdir)/ccp4_parser.h
ccp4_parser_f.o:  $(srcdir)/ccp4_parser_f.c $(srcdir)/ccp4_parser.h
ccp4_program.o:   $(srcdir)/ccp4_program.c $(srcdir)/ccp4_program.h
ccp4_general.o:         $(srcdir)/ccp4_general.c
ccp4_general_f.o:       $(srcdir)/ccp4_general_f.c
cmtzlib.o:        $(srcdir)/cmtzlib.c $(srcdir)/cmtzlib.h \
		  $(srcdir)/mtzdata.h $(srcdir)/ccp4_types.h
cmtzlib_f.o:      $(srcdir)/cmtzlib_f.c $(srcdir)/cmtzlib.h
umtzlib.o:        $(srcdir)/umtzlib.c $(srcdir)/umtzlib.h 
mmtzlib.o:        $(srcdir)/mmtzlib.c $(srcdir)/mmtzlib.h 
cmap_accessor.o:  $(srcdir)/cmap_accessor.c $(srcdir)/cmaplib.h \
                  $(srcdir)/cmap_errno.h
cmap_data.o:      $(srcdir)/cmap_data.c $(srcdir)/cmaplib.h \
                  $(srcdir)/cmap_errno.h
cmap_close.o:     $(srcdir)/cmap_close.c $(srcdir)/cmaplib.h \
                  $(srcdir)/cmap_errno.h
cmap_header.o:    $(srcdir)/cmap_header.c $(srcdir)/cmaplib.h \
                  $(srcdir)/cmap_errno.h
cmap_labels.o:    $(srcdir)/cmap_labels.c $(srcdir)/cmaplib.h \
                  $(srcdir)/cmap_errno.h
cmap_open.o:      $(srcdir)/cmap_open.c  $(srcdir)/cmaplib.h \
                  $(srcdir)/cmap_errno.h
cmap_skew.o:      $(srcdir)/cmap_skew.c $(srcdir)/cmaplib.h \
                  $(srcdir)/cmap_errno.h
cmap_stats.o:     $(srcdir)/cmap_stats.c $(srcdir)/cmaplib.h \
                  $(srcdir)/cmap_errno.h
cmap_symop.o:     $(srcdir)/cmap_symop.c $(srcdir)/cmaplib.h \
                  $(srcdir)/cmap_errno.h
cmaplib_f.o:      $(srcdir)/cmaplib_f.c $(srcdir)/cmaplib.h
csymlib.o:        $(srcdir)/csymlib.c $(srcdir)/csymlib.h
csymlib_f.o:      $(srcdir)/csymlib_f.c $(srcdir)/csymlib.h
ccp4_unitcell.o:  $(srcdir)/ccp4_unitcell.c $(srcdir)/ccp4_unitcell.h
ccp4_unitcell_f.o:  $(srcdir)/ccp4_unitcell_f.c $(srcdir)/ccp4_unitcell.h
cvecmat.o:        $(srcdir)/cvecmat.c $(srcdir)/cvecmat.h
cmtzlib_python_wrap.o: $(srcdir)/cmtzlib_python_wrap.c  $(srcdir)/mtzdata.h 
cmaplib_python_wrap.o: $(srcdir)/cmaplib_python_wrap.c 
csymlib_python_wrap.o: $(srcdir)/csymlib_python_wrap.c 
mmdb_python_wrap.o: $(mmdbsrcdir)/mmdb_python_wrap.cpp 
cmtzlib_tcl_wrap.o: $(srcdir)/cmtzlib_tcl_wrap.c  $(srcdir)/mtzdata.h 
cmaplib_tcl_wrap.o: $(srcdir)/cmaplib_tcl_wrap.c 
csymlib_tcl_wrap.o: $(srcdir)/csymlib_tcl_wrap.c 
mmdb_tcl_wrap.o: $(mmdbsrcdir)/mmdb_tcl_wrap.cpp 
cmtzlib_pl_wrap.o: $(srcdir)/cmtzlib_pl_wrap.c  $(srcdir)/mtzdata.h 
cmaplib_pl_wrap.o: $(srcdir)/cmaplib_pl_wrap.c 
csymlib_pl_wrap.o: $(srcdir)/csymlib_pl_wrap.c 

#
# test program for libraries
#

testlib : $(srcdir)/testlib.c  $L
	$(CC) -o testlib $(CFLAGS) $(srcdir)/testlib.c -all $(LDFLAGS)

#
# standard targets
#

install : all
	$(INSTALL_DATA) `pwd`/$L $(libdir)/$L
	$(RANLIB) $(libdir)/$L
	$(SHARE_INST)

uninstall :
	-rm -f $(libdir)/$L
	test -f $(libdir)/libccp4.so && rm -f $(libdir)/libccp4.so

clean :
	-rm -f core *.o *~ *.dir/*.o testlib disc.dft a.out *.orig *.rej defs.m4
	-rm -rf tagdir

realclean : clean
	-rm -rf $L *.dir TAGS unix.f libccp4.so fsplit

distclean : realclean
	-rm -f Makefile

test : testlib
	./testlib 

# Local Variables:
# mode:makefile
# End:
